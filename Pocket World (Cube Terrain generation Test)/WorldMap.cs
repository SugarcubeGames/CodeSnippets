//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;

using LibNoise;
using LibNoise.Generator;
using LibNoise.Operator;

using PWorlds.Gen.Biomes;

namespace PWorlds.Gen
{
	public class WorldMap
	{
		private float[,] heights;
		private int size;

		private GameObject worldObj;

		//A list of all the WorldChunks that make up the map
		List<WorldChunk> chunks;

		//The empty GameObject for housing the map chunks
		private GameObject mapObj;

		public WorldMap (Noise2D heightmap, int numDivisions, int size,
		                 Biome biome)
		{
			//Create / empty the GAmeObject for the map
			mapObj = new GameObject("Map");

			//The number of chunks in a single direction.  The actual number
			//of chunks would be numChunks squared.
			int numChunks = size / WorldChunk.chunkSize; 
			this.size = size;

			chunks = new List<WorldChunk>();

			//determine the minimum and maximum height.
			float hMin = 0.0f;
			float hMax = 0.0f;
			float hMod = biome.heightMultiplier;
			for(int i = 0; i<size; i++){
				for(int j = 0; j<size; j++){
					if(heightmap[i,j]*hMod < hMin){hMin = heightmap[i,j]*hMod;}
					if(heightmap[i,j]*hMod > hMax){hMax = heightmap[i,j]*hMod;}
				}
			}

			//Determing the distance covered between the minimum and maximum
			float delta = hMax - hMin;
			
			//Determine the height difference between each step on the map
			float increment = delta / (float)numDivisions;

			//Build all the chunks for the map
			for(int i = 0; i<numChunks; i++){
				for(int j = 0; j<numChunks; j++){
					chunks.Add(new WorldChunk(heightmap, new Vector2(i,j),
					                          numDivisions, hMin, increment, 
					                          biome, size));
				}
			}

			//Create the texture for the map
			Material tMat = new Material(Shader.Find("PWorlds/TerrainGradient"));
			Material wMat = new Material(Shader.Find("Standard"));
			//Material wMat = Material.

			foreach(WorldChunk c in chunks){
				c.setMaterialTerrain(tMat);
				c.setMaterialWater(wMat);
				//Set the chunk to be a child of map
				c.setParent(mapObj);
			}
			//newMat.SetFloat("_MeshHeight", Mathf.CeilToInt(delta));
			tMat.SetFloat("_MeshHeight", delta);
			tMat.SetColor("_TopColor", biome.topColor);
			tMat.SetColor("_BottomColor", biome.bottomColor);
			tMat.name = "Terrain Material";

			wMat.SetInt("_Mode", 3);
			//wMat.SetColor("_Color", biome.waterColor);
			wMat.color = biome.waterColor;
			wMat.name = "Water Material";
		}
	}
}

